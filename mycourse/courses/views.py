from django.shortcuts import render, get_object_or_404
from .models import Course
from django.contrib.auth.decorators import login_required
from django.shortcuts import redirect
from .models import Cart
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from .models import Course, Cart, Payment, Review
from django.shortcuts import redirect, get_object_or_404
import qrcode
import io
import base64
from django.http import JsonResponse
from django.contrib.auth.models import User
from django.db.models import Sum, Avg
from django.core.mail import send_mail
from django.conf import settings
from django.utils import timezone
from .models import Contact

def home(request):
    category = request.GET.get('category', '')
    
    # L·∫•y danh s√°ch kh√≥a h·ªçc
    if category:
        courses = Course.objects.filter(category=category)
    else:
        courses = Course.objects.all()
    
    # ƒê·∫øm s·ªë kh√≥a h·ªçc theo danh m·ª•c
    category_counts = {
        'all_count': Course.objects.count(),
        'python_count': Course.objects.filter(category='python').count(),
        'django_count': Course.objects.filter(category='django').count(),
        'web_count': Course.objects.filter(category='web').count(),
        'data_count': Course.objects.filter(category='data').count(),
    }
    
    # Danh s√°ch danh m·ª•c cho template
    course_categories = Course.CATEGORY_CHOICES
    
    return render(request, 'courses/course_list.html', {
        'courses': courses,
        'selected_category': category,
        'course_categories': course_categories,
        **category_counts  # Truy·ªÅn t·∫•t c·∫£ counts v√†o template
    })

def course_detail(request, course_id):
    # L·∫•y kh√≥a h·ªçc theo id, n·∫øu kh√¥ng c√≥ th√¨ show l·ªói 404
    course = get_object_or_404(Course, id=course_id)
    
    # Ki·ªÉm tra user ƒë√£ mua kh√≥a h·ªçc ch∆∞a
    user_has_purchased = False
    if request.user.is_authenticated:
        user_has_purchased = Payment.objects.filter(
            user=request.user, 
            course=course, 
            status='completed'
        ).exists()
    
    course = get_object_or_404(Course, id=course_id)
    return render(request, 'courses/course_detail.html', {'course': course})


@login_required
# Th√™m kh√≥a h·ªçc v√†o gi·ªè
def add_to_cart(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    
    # Ki·ªÉm tra n·∫øu kh√≥a h·ªçc ƒë√£ c√≥ trong gi·ªè
    cart_item, created = Cart.objects.get_or_create(
        user=request.user,
        course=course
    )
    
    if created:
        messages.success(request, f'ƒê√£ th√™m "{course.title}" v√†o gi·ªè h√†ng!')
    else:
        messages.info(request, f'"{course.title}" ƒë√£ c√≥ trong gi·ªè h√†ng!')
    
    return redirect('home')

@login_required
# Xem gi·ªè h√†ng
def view_cart(request):
    cart_items = Cart.objects.filter(user=request.user)
    return render(request, 'courses/cart.html', {'cart_items': cart_items})

# T√¨m ki·∫øm kh√≥a h·ªçc
def search_courses(request):
    query = request.GET.get('q', '')
    if query:
        courses = Course.objects.filter(title__icontains=query) | Course.objects.filter(description__icontains=query)
    else:
        courses = Course.objects.all()
    
    return render(request, 'courses/search_results.html', {
        'courses': courses,
        'query': query
    })


@login_required
def payment_success(request):
    return render(request, 'courses/payment_success.html')

@login_required
# Trang t·ªïng quan ng∆∞·ªùi d√πng
def dashboard(request):
    enrolled_courses = Course.objects.filter(
        id__in=Cart.objects.filter(user=request.user).values('course_id')
    )
    
    return render(request, 'courses/dashboard.html', {
        'enrolled_courses': enrolled_courses
    })


@login_required
# Thanh to√°n tr·ª±c ti·∫øp m·ªôt kh√≥a h·ªçc, x√≥a c√°c kh√≥a h·ªçc kh√°c trong gi·ªè
def checkout_direct(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    
    # X√≥a t·∫•t c·∫£ items trong gi·ªè h√†ng tr∆∞·ªõc ƒë√≥
    Cart.objects.filter(user=request.user).delete()
    
    # Th√™m kh√≥a h·ªçc v√†o gi·ªè h√†ng
    Cart.objects.create(user=request.user, course=course)
    
    # Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n
    return redirect('checkout')

@login_required
# Thanh to√°n c√°c kh√≥a h·ªçc trong gi·ªè
def checkout(request):
    cart_items = Cart.objects.filter(user=request.user)
    
    if not cart_items.exists():
        messages.warning(request, 'Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!')
        return redirect('home')
    
    total_amount = sum(item.course.price for item in cart_items)
    
    if request.method == 'POST':
        payment_method = request.POST.get('payment_method')
        
        # T·∫°o c√°c b·∫£n ghi thanh to√°n
        for item in cart_items:
            Payment.objects.create(
                user=request.user,
                course=item.course,
                amount=item.course.price,
                payment_method=payment_method,
                status='completed'
            )
        
        # X√≥a gi·ªè h√†ng sau khi thanh to√°n
        cart_items.delete()
        
        messages.success(request, 'Thanh to√°n th√†nh c√¥ng! B·∫°n ƒë√£ s·ªü h·ªØu kh√≥a h·ªçc.')
        return redirect('my_courses')
    
    return render(request, 'courses/checkout.html', {
        'cart_items': cart_items,
        'total_amount': total_amount
    })


@login_required
# T·∫°o QR code cho thanh to√°n MoMo
def generate_qr_code(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    
    # T·∫°o n·ªôi dung QR code (c√≥ th·ªÉ thay b·∫±ng API MoMo th·ª±c t·∫ø)
    qr_content = f"Thanh to√°n MoMo\nKh√≥a h·ªçc: {course.title}\nS·ªë ti·ªÅn: {course.price} VNƒê\nNg∆∞·ªùi nh·∫≠n: H·ªçc L·∫≠p Tr√¨nh\nSƒêT: 0909123456"
    
    # T·∫°o QR code
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(qr_content)
    qr.make(fit=True)
    
    # T·∫°o image t·ª´ QR code
    img = qr.make_image(fill_color="black", back_color="white")
    
    # Chuy·ªÉn image th√†nh base64
    buffer = io.BytesIO()
    img.save(buffer, format="PNG")
    qr_base64 = base64.b64encode(buffer.getvalue()).decode()
    
    return JsonResponse({'qr_code': qr_base64})


@login_required
# Th√™m ƒë√°nh gi√° cho kh√≥a h·ªçc
def add_review(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    
    if request.method == 'POST':
        rating = request.POST.get('rating')
        comment = request.POST.get('comment')
        
        Review.objects.create(
            user=request.user,
            course=course,
            rating=rating,
            comment=comment
        )
        
        messages.success(request, 'C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√° kh√≥a h·ªçc!')
        return redirect('course_detail', course_id=course_id)
    
    return redirect('course_detail', course_id=course_id)

@login_required
# Trang t·ªïng quan admin
def admin_dashboard(request):
    if not request.user.is_staff:
        return redirect('home')
    
    stats = {
        'total_courses': Course.objects.count(),
        'total_users': User.objects.count(),
        'total_sales': Payment.objects.aggregate(Sum('amount'))['amount__sum'] or 0,
        'total_orders': Payment.objects.count(),
    }
    
    return render(request, 'courses/admin_dashboard.html', {'stats': stats})

# Trang About
def about(request):
    return render(request, 'courses/about.html')
# Trang Contact
def contact(request):
    if request.method == 'POST':
        # X·ª≠ l√Ω form li√™n h·ªá (c√≥ th·ªÉ l∆∞u v√†o database ho·∫∑c g·ª≠i email)
        name = request.POST.get('name')
        email = request.POST.get('email')
        message = request.POST.get('message')
        
        # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        messages.success(request, 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t.')
        return redirect('contact')
    
    return render(request, 'courses/contact.html')

def handler404(request, exception):
    return render(request, 'courses/404.html', status=404)

def handler500(request):
    return render(request, 'courses/500.html', status=500)

# Trang Contact v·ªõi form v√† g·ª≠i email
def contact(request):
    if request.method == 'POST':
        name = request.POST.get('name', '').strip()
        email = request.POST.get('email', '').strip()
        phone = request.POST.get('phone', '').strip()
        message = request.POST.get('message', '').strip()
        
        # Validation
        errors = []
        if not name:
            errors.append('Vui l√≤ng nh·∫≠p h·ªç t√™n')
        if not email:
            errors.append('Vui l√≤ng nh·∫≠p email')
        elif '@' not in email:
            errors.append('Email kh√¥ng h·ª£p l·ªá')
        if not message:
            errors.append('Vui l√≤ng nh·∫≠p n·ªôi dung')
        
        if errors:
            for error in errors:
                messages.error(request, error)
            return render(request, 'courses/contact.html', {
                'name': name,
                'email': email,
                'phone': phone,
                'message': message
            })
        
        # L∆∞u v√†o database
        contact_entry = Contact.objects.create(
            name=name,
            email=email,
            phone=phone if phone else None,
            message=message
        )
        
        # G·ª≠i email th√¥ng b√°o cho ADMIN (b·∫•t ƒë·ªìng b·ªô)
        try:
            admin_subject = f'üìß LI√äN H·ªÜ M·ªöI: {name} - #{contact_entry.id}'
            admin_message = f"""
            TH√îNG TIN LI√äN H·ªÜ M·ªöI üéØ

            üë§ H·ªç t√™n: {name}
            üìß Email: {email}
            üìû S·ªë ƒëi·ªán tho·∫°i: {phone if phone else 'Ch∆∞a cung c·∫•p'}
            üÜî M√£ li√™n h·ªá: #{contact_entry.id}
            üìÖ Th·ªùi gian: {timezone.now().strftime('%d/%m/%Y %H:%M:%S')}

            üìù N·ªòI DUNG:
            {message}

            ‚Äî
            H·ªá th·ªëng H·ªçc L·∫≠p Tr√¨nh
            """

            send_mail(
                admin_subject,
                admin_message,
                settings.DEFAULT_FROM_EMAIL,
                [settings.ADMIN_EMAIL],  # G·ª≠i cho admin
                fail_silently=True,
            )
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói g·ª≠i email cho admin: {e}")

        # G·ª≠i email x√°c nh·∫≠n cho NG∆Ø·ªúI D√ôNG (b·∫•t ƒë·ªìng b·ªô)
        try:
            user_subject = '‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi H·ªçc L·∫≠p Tr√¨nh!'
            user_message = f"""
            Xin ch√†o {name}! üëã

            C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi H·ªçc L·∫≠p Tr√¨nh. Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn c·ªßa b·∫°n v√† s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t (th∆∞·ªùng trong v√≤ng 24h).

            üìã TH√îNG TIN LI√äN H·ªÜ C·ª¶A B·∫†N:
            ‚Ä¢ H·ªç t√™n: {name}
            ‚Ä¢ Email: {email}
            ‚Ä¢ S·ªë ƒëi·ªán tho·∫°i: {phone if phone else 'Kh√¥ng c√≥'}
            ‚Ä¢ M√£ li√™n h·ªá: #{contact_entry.id}
            ‚Ä¢ Th·ªùi gian: {timezone.now().strftime('%d/%m/%Y %H:%M')}

            üìù N·ªòI DUNG B·∫†N G·ª¨I:
            {message}

            üîç TR·∫†NG TH√ÅI: ƒê√£ ti·∫øp nh·∫≠n ‚úÖ

            üí¨ Ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i v·ªõi b·∫°n s·ªõm nh·∫•t c√≥ th·ªÉ. 
            N·∫øu c·∫ßn h·ªó tr·ª£ kh·∫©n c·∫•p, vui l√≤ng g·ªçi hotline: 0909 123 456

            Tr√¢n tr·ªçng,
            ƒê·ªôi ng≈© H·ªçc L·∫≠p Tr√¨nh üöÄ
            üìß vult8073@ut.edu.vn
            üåê https://hoclaptrinh.ut.edu.vn
            """

            send_mail(
                user_subject,
                user_message,
                settings.DEFAULT_FROM_EMAIL,
                [email],  # G·ª≠i cho ng∆∞·ªùi d√πng
                fail_silently=True,
            )
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói g·ª≠i email x√°c nh·∫≠n: {e}")

        messages.success(request, '‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫ng t√¥i ƒë√£ g·ª≠i email x√°c nh·∫≠n v√† s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t.')
        return redirect('contact')
    
    return render(request, 'courses/contact.html')

@login_required
# Trang t·ªïng quan ng∆∞·ªùi d√πng
def user_dashboard(request):
    # L·∫•y c√°c kh√≥a h·ªçc ƒë√£ mua
    purchased_courses = Course.objects.filter(
        payment__user=request.user, 
        payment__status='completed'
    ).distinct()
    
    # L·∫•y c√°c kh√≥a h·ªçc trong gi·ªè h√†ng
    cart_courses = Course.objects.filter(
        cart__user=request.user
    )
    
    # L·∫•y l·ªãch s·ª≠ thanh to√°n
    payment_history = Payment.objects.filter(
        user=request.user
    ).select_related('course').order_by('-created_at')[:10]
    
    # L·∫•y b√†i vi·∫øt forum c·ªßa user
    user_posts = ForumPost.objects.filter(
        author=request.user
    ).order_by('-created_at')[:5]
    
    # L·∫•y reviews c·ªßa user
    user_reviews = Review.objects.filter(
        user=request.user
    ).select_related('course').order_by('-created_at')[:5]
    
    # Th·ªëng k√™ c√° nh√¢n
    user_stats = {
        'total_courses': purchased_courses.count(),
        'total_spent': Payment.objects.filter(
            user=request.user, 
            status='completed'
        ).aggregate(Sum('amount'))['amount__sum'] or 0,
        'courses_in_cart': cart_courses.count(),
        'total_posts': ForumPost.objects.filter(author=request.user).count(),
        'total_reviews': Review.objects.filter(user=request.user).count(),
    }
    
    return render(request, 'courses/user_dashboard.html', {
        'purchased_courses': purchased_courses,
        'cart_courses': cart_courses,
        'payment_history': payment_history,
        'user_posts': user_posts,
        'user_reviews': user_reviews,
        'user_stats': user_stats,
    })


@login_required
def my_courses(request):
    # L·∫•y c√°c kh√≥a h·ªçc ƒë√£ thanh to√°n th√†nh c√¥ng
    paid_courses = Course.objects.filter(
        payment__user=request.user, 
        payment__status='completed'
    ).distinct()
    
    return render(request, 'courses/my_courses.html', {'courses': paid_courses})


from django.contrib.auth import logout
from django.shortcuts import redirect

# ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng
def custom_logout(request):
    if request.method == 'POST':
        logout(request)
        messages.success(request, 'ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!')
        return redirect('home')
    return redirect('home')



from .forms import ReviewForm
from .models import Review
from django.http import JsonResponse
# T·∫°o view chi ti·∫øt kh√≥a h·ªçc v·ªõi hi·ªÉn th·ªã ƒë√°nh gi√° v√† form ƒë√°nh gi√°
def course_detail(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    reviews = Review.objects.filter(course=course).order_by('-created_at')
    
    # Ki·ªÉm tra user ƒë√£ mua kh√≥a h·ªçc ch∆∞a
    user_has_purchased = False
    if request.user.is_authenticated:
        user_has_purchased = Payment.objects.filter(
            user=request.user, 
            course=course, 
            status='completed'
        ).exists()
    
    # Ki·ªÉm tra user ƒë√£ review ch∆∞a
    user_review = None
    if request.user.is_authenticated:
        try:
            user_review = Review.objects.get(user=request.user, course=course)
        except Review.DoesNotExist:
            user_review = None
    
    # X·ª≠ l√Ω form review
    if request.method == 'POST' and request.user.is_authenticated and user_has_purchased:
        form = ReviewForm(request.POST)
        if form.is_valid():
            review = form.save(commit=False)
            review.user = request.user
            review.course = course
            review.save()
            messages.success(request, 'C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√° kh√≥a h·ªçc!')
            return redirect('course_detail', course_id=course_id)
    else:
        form = ReviewForm()
    
    return render(request, 'courses/course_detail.html', {
        'course': course,
        'reviews': reviews,
        'user_has_purchased': user_has_purchased,
        'user_review': user_review,
        'form': form,
        'average_rating': reviews.aggregate(Avg('rating'))['rating__avg'] or 0,
        'total_reviews': reviews.count()
    })



@login_required
# G·ª≠i ƒë√°nh gi√° qua AJAX
def submit_review(request, course_id):
    if request.method == 'POST':
        course = get_object_or_404(Course, id=course_id)
        
        # Ki·ªÉm tra user ƒë√£ mua kh√≥a h·ªçc ch∆∞a
        has_purchased = Payment.objects.filter(
            user=request.user, 
            course=course, 
            status='completed'
        ).exists()
        
        if not has_purchased:
            return JsonResponse({'success': False, 'error': 'B·∫°n c·∫ßn mua kh√≥a h·ªçc tr∆∞·ªõc khi ƒë√°nh gi√°'})
        
        # Ki·ªÉm tra ƒë√£ review ch∆∞a
        if Review.objects.filter(user=request.user, course=course).exists():
            return JsonResponse({'success': False, 'error': 'B·∫°n ƒë√£ ƒë√°nh gi√° kh√≥a h·ªçc n√†y r·ªìi'})
        
        rating = request.POST.get('rating')
        comment = request.POST.get('comment')
        
        if rating and comment:
            Review.objects.create(
                user=request.user,
                course=course,
                rating=rating,
                comment=comment
            )
            return JsonResponse({'success': True})
        
        return JsonResponse({'success': False, 'error': 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin'})
    
    return JsonResponse({'success': False, 'error': 'Invalid request'})


from .models import ForumPost, PostLike, PostComment
from django.http import JsonResponse
from django.db.models import Count, Q
# Danh s√°ch b√†i vi·∫øt di·ªÖn ƒë√†n v·ªõi t√¨m ki·∫øm v√† l·ªçc tags
def forum_list(request):
    search_query = request.GET.get('q', '')
    tag_filter = request.GET.get('tag', '')
    
    posts = ForumPost.objects.annotate(
        like_count=Count('postlike'),
        comment_count=Count('comments')
    )
    
    if search_query:
        posts = posts.filter(
            Q(title__icontains=search_query) |
            Q(content__icontains=search_query) |
            Q(tags__icontains=search_query)
        )
    
    if tag_filter:
        posts = posts.filter(tags__icontains=tag_filter)
    
    # L·∫•y danh s√°ch tags ph·ªï bi·∫øn
    popular_tags = ForumPost.objects.exclude(tags__isnull=True).exclude(tags__exact='')\
        .values_list('tags', flat=True)
    
    return render(request, 'courses/forum_list.html', {
        'posts': posts,
        'search_query': search_query,
        'tag_filter': tag_filter,
        'popular_tags': popular_tags
    })

@login_required
def forum_create(request):
    if request.method == 'POST':
        title = request.POST.get('title')
        content = request.POST.get('content')
        tags = request.POST.get('tags', '')
        
        if title and content:
            post = ForumPost.objects.create(
                author=request.user,
                title=title,
                content=content,
                tags=tags
            )
            messages.success(request, 'ƒê√£ t·∫°o b√†i vi·∫øt th√†nh c√¥ng!')
            return redirect('forum_detail', post_id=post.id)
    
    return render(request, 'courses/forum_create.html')

def forum_detail(request, post_id):
    post = get_object_or_404(
        ForumPost.objects.annotate(
            like_count=Count('postlike'),
            comment_count=Count('comments')
        ), 
        id=post_id
    )
    
    # Ki·ªÉm tra user ƒë√£ like ch∆∞a
    user_has_liked = False
    if request.user.is_authenticated:
        user_has_liked = PostLike.objects.filter(user=request.user, post=post).exists()
    
    return render(request, 'courses/forum_detail.html', {
        'post': post,
        'comments': post.comments.all(),
        'user_has_liked': user_has_liked,
        'like_count': post.like_count
    })

@login_required
def forum_edit(request, post_id):
    post = get_object_or_404(ForumPost, id=post_id, author=request.user)
    
    if request.method == 'POST':
        post.title = request.POST.get('title', post.title)
        post.content = request.POST.get('content', post.content)
        post.tags = request.POST.get('tags', post.tags)
        post.save()
        messages.success(request, 'ƒê√£ c·∫≠p nh·∫≠t b√†i vi·∫øt!')
        return redirect('forum_detail', post_id=post.id)
    
    return render(request, 'courses/forum_edit.html', {'post': post})

@login_required
def toggle_like(request, post_id):
    if request.method == 'POST':
        post = get_object_or_404(ForumPost, id=post_id)
        like, created = PostLike.objects.get_or_create(
            user=request.user,
            post=post
        )
        
        if not created:
            like.delete()
            liked = False
        else:
            liked = True
        
        like_count = PostLike.objects.filter(post=post).count()
        
        return JsonResponse({
            'liked': liked,
            'like_count': like_count
        })
    
    return JsonResponse({'error': 'Invalid request'})

@login_required
def add_comment(request, post_id):
    if request.method == 'POST':
        post = get_object_or_404(ForumPost, id=post_id)
        content = request.POST.get('content')
        
        if content:
            comment = PostComment.objects.create(
                author=request.user,
                post=post,
                content=content
            )
            
            return JsonResponse({
                'success': True,
                'comment': {
                    'author': comment.author.username,
                    'content': comment.content,
                    'created_at': comment.created_at.strftime('%d/%m/%Y %H:%M'),
                    'avatar': 'üë§'  # C√≥ th·ªÉ thay b·∫±ng avatar th·∫≠t
                }
            })
    
    return JsonResponse({'success': False, 'error': 'N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'})


@login_required
# X√≥a kh√≥a h·ªçc kh·ªèi gi·ªè h√†ng
def remove_from_cart(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    cart_item = get_object_or_404(Cart, user=request.user, course=course)
    cart_item.delete()
    
    messages.success(request, f'ƒê√£ x√≥a "{course.title}" kh·ªèi gi·ªè h√†ng!')
    return redirect('view_cart')


from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from django.db.models import Avg, Count, Sum
from .models import Course, Payment, Review, LearningPath, WeeklySchedule, DailyTask

@login_required
def learning_path(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    
    # Ki·ªÉm tra user ƒë√£ mua kh√≥a h·ªçc ch∆∞a
    has_access = Payment.objects.filter(
        user=request.user, 
        course=course, 
        status='completed'
    ).exists()
    
    if not has_access:
        messages.error(request, 'B·∫°n c·∫ßn mua kh√≥a h·ªçc ƒë·ªÉ xem l·ªô tr√¨nh h·ªçc t·∫≠p!')
        return redirect('course_detail', course_id=course_id)
    
    # L·∫•y learning path ho·∫∑c t·∫°o m·∫∑c ƒë·ªãnh
    learning_path, created = LearningPath.objects.get_or_create(
        course=course,
        defaults={
            'total_weeks': 4,
            'hours_per_week': 5,
            'difficulty': 'beginner'
        }
    )
    
    weekly_schedules = WeeklySchedule.objects.filter(learning_path=learning_path).prefetch_related('days')
    
    # T√≠nh t·ªïng ti·∫øn ƒë·ªô
    total_tasks = DailyTask.objects.filter(weekly_schedule__learning_path=learning_path).count()
    completed_tasks = DailyTask.objects.filter(
        weekly_schedule__learning_path=learning_path,
        is_completed=True
    ).count()
    
    progress = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
    
    return render(request, 'courses/learning_path.html', {
        'course': course,
        'learning_path': learning_path,
        'weekly_schedules': weekly_schedules,
        'progress': progress,
        'total_tasks': total_tasks,
        'completed_tasks': completed_tasks
    })

@login_required
def toggle_task_completion(request, task_id):
    task = get_object_or_404(DailyTask, id=task_id)
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    has_access = Payment.objects.filter(
        user=request.user, 
        course=task.weekly_schedule.learning_path.course, 
        status='completed'
    ).exists()
    
    if not has_access:
        return JsonResponse({'success': False, 'error': 'Access denied'})
    
    task.is_completed = not task.is_completed
    task.save()
    
    return JsonResponse({
        'success': True, 
        'is_completed': task.is_completed,
        'task_id': task.id
    })